/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
  '\n      query GetAccounts(\n        $limit: Int\n        $offset: Int\n        $orderBy: [AccountOrderByInput!]\n      ) {\n        accounts(limit: $limit, offset: $offset, orderBy: $orderBy) {\n          id\n          free\n          frozen\n          reserved\n        }\n        meta: accountsConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    ': typeof types.GetAccountsDocument;
  '\n      query GetAccountById($id: String!, $limit: Int!) {\n        account: accountById(id: $id) {\n          id\n          free\n          frozen\n          reserved\n        }\n        transactions: transfersConnection(\n          orderBy: timestamp_DESC\n          first: $limit\n          where: {\n            extrinsicHash_isNull: false\n            AND: { from: { id_eq: $id }, OR: { to: { id_eq: $id } } }\n          }\n        ) {\n          edges {\n            node {\n              fee\n              extrinsicHash\n              block {\n                height\n              }\n              amount\n              timestamp\n              from {\n                id\n              }\n              to {\n                id\n              }\n            }\n          }\n\n          totalCount\n        }\n        reversibleTransactions: reversibleTransfersConnection(\n          orderBy: timestamp_DESC\n          first: $limit\n          where: { from: { id_eq: $id }, OR: { to: { id_eq: $id } } }\n        ) {\n          edges {\n            node {\n              extrinsicHash\n              scheduledAt\n              timestamp\n              status\n              block {\n                height\n              }\n              from {\n                id\n              }\n              to {\n                id\n              }\n            }\n          }\n\n          totalCount\n        }\n      }\n    ': typeof types.GetAccountByIdDocument;
  '\n      query GetAccountsStats($startDate: DateTime!, $endDate: DateTime!) {\n        all: accountsConnection(orderBy: id_ASC) {\n          totalCount\n        }\n        recentlyActive: accountsConnection(\n          orderBy: id_ASC\n          where: {\n            transfersFrom_some: {\n              timestamp_gte: $startDate\n              timestamp_lte: $endDate\n            }\n          }\n        ) {\n          totalCount\n        }\n        recentlyDeposited: accountsConnection(\n          orderBy: id_ASC\n          where: {\n            transfersTo_some: {\n              timestamp_gte: $startDate\n              timestamp_lte: $endDate\n            }\n          }\n        ) {\n          totalCount\n        }\n      }\n    ': typeof types.GetAccountsStatsDocument;
  '\n      query GetBlocks(\n        $limit: Int\n        $offset: Int\n        $orderBy: [BlockOrderByInput!]!\n        $where: BlockWhereInput\n      ) {\n        blocks(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n          where: $where\n        ) {\n          id\n          hash\n          height\n          timestamp\n        }\n        meta: blocksConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    ': typeof types.GetBlocksDocument;
  '\n      query GetRecentBlocks(\n        $limit: Int\n        $offset: Int\n        $orderBy: [BlockOrderByInput!]\n      ) {\n        blocks(limit: $limit, offset: $offset, orderBy: $orderBy) {\n          id\n          hash\n          height\n          timestamp\n        }\n      }\n    ': typeof types.GetRecentBlocksDocument;
  '\n      query GetBlockById($height: Int!, $hash: String!, $limit: Int!) {\n        blocks(where: { height_eq: $height, OR: { hash_eq: $hash } }) {\n          id\n          hash\n          height\n          timestamp\n        }\n        transactions: transfersConnection(\n          orderBy: timestamp_DESC\n          first: $limit\n          where: {\n            extrinsicHash_isNull: false\n            AND: {\n              block: { height_eq: $height }\n              OR: { block: { hash_eq: $hash } }\n            }\n          }\n        ) {\n          edges {\n            node {\n              fee\n              extrinsicHash\n              block {\n                height\n              }\n              amount\n              timestamp\n              from {\n                id\n              }\n              to {\n                id\n              }\n            }\n          }\n\n          totalCount\n        }\n        reversibleTransactions: reversibleTransfersConnection(\n          orderBy: timestamp_DESC\n          first: $limit\n          where: {\n            block: { height_eq: $height }\n            OR: { block: { hash_eq: $hash } }\n          }\n        ) {\n          edges {\n            node {\n              extrinsicHash\n              scheduledAt\n              timestamp\n              status\n              block {\n                height\n              }\n              from {\n                id\n              }\n              to {\n                id\n              }\n            }\n          }\n\n          totalCount\n        }\n      }\n    ': typeof types.GetBlockByIdDocument;
  '\n      query GetStatus($beginningDate: DateTime!, $endDate: DateTime!) {\n        transactions: transfersConnection(\n          orderBy: id_ASC\n          where: { extrinsicHash_isNull: false }\n        ) {\n          totalCount\n        }\n        reversibleTransactions: reversibleTransfersConnection(orderBy: id_ASC) {\n          totalCount\n        }\n        status: squidStatus {\n          hash\n          height\n          finalizedHeight\n          finalizedHash\n        }\n        allActiveAccounts: accountsConnection(\n          orderBy: id_ASC\n          where: {\n            transfersFrom_some: {\n              timestamp_gte: $beginningDate\n              timestamp_lte: $endDate\n            }\n          }\n        ) {\n          totalCount\n        }\n        allDepositAccounts: accountsConnection(\n          orderBy: id_ASC\n          where: {\n            transfersTo_some: {\n              timestamp_gte: $beginningDate\n              timestamp_lte: $endDate\n            }\n          }\n        ) {\n          totalCount\n        }\n      }\n    ': typeof types.GetStatusDocument;
  '\n      query GetReversibleTransactions(\n        $limit: Int\n        $offset: Int\n        $orderBy: [ReversibleTransferOrderByInput!]\n        $where: ReversibleTransferWhereInput\n      ) {\n        reversibleTransactions: reversibleTransfers(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n          where: $where\n        ) {\n          extrinsicHash\n          amount\n          timestamp\n          status\n          block {\n            height\n          }\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n        meta: reversibleTransfersConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    ': typeof types.GetReversibleTransactionsDocument;
  '\n      query GetRecentReversibleTransactions(\n        $limit: Int\n        $offset: Int\n        $orderBy: [ReversibleTransferOrderByInput!]\n      ) {\n        reversibleTransactions: reversibleTransfers(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n        ) {\n          extrinsicHash\n          amount\n          timestamp\n          status\n          block {\n            height\n          }\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n      }\n    ': typeof types.GetRecentReversibleTransactionsDocument;
  '\n      query GetReversibleTransactionsStats(\n        $startDate: DateTime!\n        $endDate: DateTime!\n      ) {\n        last24Hour: reversibleTransfersConnection(\n          orderBy: id_ASC\n          where: { timestamp_gte: $startDate, timestamp_lte: $endDate }\n        ) {\n          totalCount\n        }\n        allTime: reversibleTransfersConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    ': typeof types.GetReversibleTransactionsStatsDocument;
  '\n      query GetReversibleTransactionByHash($hash: String!) {\n        reversibleTransactions: reversibleTransfers(\n          where: { extrinsicHash_eq: $hash }\n        ) {\n          fee\n          amount\n          extrinsicHash\n          txId\n          scheduledAt\n          timestamp\n          status\n          block {\n            height\n          }\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n      }\n    ': typeof types.GetReversibleTransactionByHashDocument;
  '\n      query GetReversibleTransactionStatusByHash($hash: String!) {\n        reversibleTransactions: reversibleTransfers(\n          where: { extrinsicHash_eq: $hash }\n        ) {\n          status\n        }\n      }\n    ': typeof types.GetReversibleTransactionStatusByHashDocument;
  '\n      query SearchAll($keyword: String, $keyword_number: Int, $limit: Int) {\n        transactions: transfers(\n          limit: $limit\n          where: { extrinsicHash_startsWith: $keyword }\n        ) {\n          extrinsicHash\n        }\n        reversibleTransactions: reversibleTransfers(\n          limit: $limit\n          where: { extrinsicHash_startsWith: $keyword }\n        ) {\n          extrinsicHash\n        }\n        accounts(limit: $limit, where: { id_startsWith: $keyword }) {\n          id\n        }\n        blocks(\n          limit: $limit\n          where: {\n            hash_startsWith: $keyword\n            OR: { height_eq: $keyword_number }\n          }\n        ) {\n          height\n        }\n      }\n    ': typeof types.SearchAllDocument;
  '\n      query GetTransactions(\n        $limit: Int\n        $offset: Int\n        $orderBy: [TransferOrderByInput!]\n        $where: TransferWhereInput\n      ) {\n        transactions: transfers(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n          where: $where\n        ) {\n          fee\n          extrinsicHash\n          block {\n            height\n          }\n          amount\n          timestamp\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n        meta: transfersConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    ': typeof types.GetTransactionsDocument;
  '\n      query GetRecentTransactions(\n        $limit: Int\n        $offset: Int\n        $orderBy: [TransferOrderByInput!]\n        $where: TransferWhereInput\n      ) {\n        transactions: transfers(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n          where: $where\n        ) {\n          fee\n          extrinsicHash\n          block {\n            height\n          }\n          amount\n          timestamp\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n      }\n    ': typeof types.GetRecentTransactionsDocument;
  '\n      query GetTransactionsStats($startDate: DateTime!, $endDate: DateTime!) {\n        last24Hour: transfersConnection(\n          orderBy: id_ASC\n          where: {\n            timestamp_gte: $startDate\n            timestamp_lte: $endDate\n            extrinsicHash_isNull: false\n          }\n        ) {\n          totalCount\n        }\n        allTime: transfersConnection(\n          orderBy: id_ASC\n          where: { extrinsicHash_isNull: false }\n        ) {\n          totalCount\n        }\n      }\n    ': typeof types.GetTransactionsStatsDocument;
  '\n      query GetTransactionByHash($hash: String!) {\n        transactions: transfers(where: { extrinsicHash_eq: $hash }) {\n          fee\n          extrinsicHash\n          block {\n            height\n          }\n          amount\n          timestamp\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n      }\n    ': typeof types.GetTransactionByHashDocument;
};
const documents: Documents = {
  '\n      query GetAccounts(\n        $limit: Int\n        $offset: Int\n        $orderBy: [AccountOrderByInput!]\n      ) {\n        accounts(limit: $limit, offset: $offset, orderBy: $orderBy) {\n          id\n          free\n          frozen\n          reserved\n        }\n        meta: accountsConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    ':
    types.GetAccountsDocument,
  '\n      query GetAccountById($id: String!, $limit: Int!) {\n        account: accountById(id: $id) {\n          id\n          free\n          frozen\n          reserved\n        }\n        transactions: transfersConnection(\n          orderBy: timestamp_DESC\n          first: $limit\n          where: {\n            extrinsicHash_isNull: false\n            AND: { from: { id_eq: $id }, OR: { to: { id_eq: $id } } }\n          }\n        ) {\n          edges {\n            node {\n              fee\n              extrinsicHash\n              block {\n                height\n              }\n              amount\n              timestamp\n              from {\n                id\n              }\n              to {\n                id\n              }\n            }\n          }\n\n          totalCount\n        }\n        reversibleTransactions: reversibleTransfersConnection(\n          orderBy: timestamp_DESC\n          first: $limit\n          where: { from: { id_eq: $id }, OR: { to: { id_eq: $id } } }\n        ) {\n          edges {\n            node {\n              extrinsicHash\n              scheduledAt\n              timestamp\n              status\n              block {\n                height\n              }\n              from {\n                id\n              }\n              to {\n                id\n              }\n            }\n          }\n\n          totalCount\n        }\n      }\n    ':
    types.GetAccountByIdDocument,
  '\n      query GetAccountsStats($startDate: DateTime!, $endDate: DateTime!) {\n        all: accountsConnection(orderBy: id_ASC) {\n          totalCount\n        }\n        recentlyActive: accountsConnection(\n          orderBy: id_ASC\n          where: {\n            transfersFrom_some: {\n              timestamp_gte: $startDate\n              timestamp_lte: $endDate\n            }\n          }\n        ) {\n          totalCount\n        }\n        recentlyDeposited: accountsConnection(\n          orderBy: id_ASC\n          where: {\n            transfersTo_some: {\n              timestamp_gte: $startDate\n              timestamp_lte: $endDate\n            }\n          }\n        ) {\n          totalCount\n        }\n      }\n    ':
    types.GetAccountsStatsDocument,
  '\n      query GetBlocks(\n        $limit: Int\n        $offset: Int\n        $orderBy: [BlockOrderByInput!]!\n        $where: BlockWhereInput\n      ) {\n        blocks(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n          where: $where\n        ) {\n          id\n          hash\n          height\n          timestamp\n        }\n        meta: blocksConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    ':
    types.GetBlocksDocument,
  '\n      query GetRecentBlocks(\n        $limit: Int\n        $offset: Int\n        $orderBy: [BlockOrderByInput!]\n      ) {\n        blocks(limit: $limit, offset: $offset, orderBy: $orderBy) {\n          id\n          hash\n          height\n          timestamp\n        }\n      }\n    ':
    types.GetRecentBlocksDocument,
  '\n      query GetBlockById($height: Int!, $hash: String!, $limit: Int!) {\n        blocks(where: { height_eq: $height, OR: { hash_eq: $hash } }) {\n          id\n          hash\n          height\n          timestamp\n        }\n        transactions: transfersConnection(\n          orderBy: timestamp_DESC\n          first: $limit\n          where: {\n            extrinsicHash_isNull: false\n            AND: {\n              block: { height_eq: $height }\n              OR: { block: { hash_eq: $hash } }\n            }\n          }\n        ) {\n          edges {\n            node {\n              fee\n              extrinsicHash\n              block {\n                height\n              }\n              amount\n              timestamp\n              from {\n                id\n              }\n              to {\n                id\n              }\n            }\n          }\n\n          totalCount\n        }\n        reversibleTransactions: reversibleTransfersConnection(\n          orderBy: timestamp_DESC\n          first: $limit\n          where: {\n            block: { height_eq: $height }\n            OR: { block: { hash_eq: $hash } }\n          }\n        ) {\n          edges {\n            node {\n              extrinsicHash\n              scheduledAt\n              timestamp\n              status\n              block {\n                height\n              }\n              from {\n                id\n              }\n              to {\n                id\n              }\n            }\n          }\n\n          totalCount\n        }\n      }\n    ':
    types.GetBlockByIdDocument,
  '\n      query GetStatus($beginningDate: DateTime!, $endDate: DateTime!) {\n        transactions: transfersConnection(\n          orderBy: id_ASC\n          where: { extrinsicHash_isNull: false }\n        ) {\n          totalCount\n        }\n        reversibleTransactions: reversibleTransfersConnection(orderBy: id_ASC) {\n          totalCount\n        }\n        status: squidStatus {\n          hash\n          height\n          finalizedHeight\n          finalizedHash\n        }\n        allActiveAccounts: accountsConnection(\n          orderBy: id_ASC\n          where: {\n            transfersFrom_some: {\n              timestamp_gte: $beginningDate\n              timestamp_lte: $endDate\n            }\n          }\n        ) {\n          totalCount\n        }\n        allDepositAccounts: accountsConnection(\n          orderBy: id_ASC\n          where: {\n            transfersTo_some: {\n              timestamp_gte: $beginningDate\n              timestamp_lte: $endDate\n            }\n          }\n        ) {\n          totalCount\n        }\n      }\n    ':
    types.GetStatusDocument,
  '\n      query GetReversibleTransactions(\n        $limit: Int\n        $offset: Int\n        $orderBy: [ReversibleTransferOrderByInput!]\n        $where: ReversibleTransferWhereInput\n      ) {\n        reversibleTransactions: reversibleTransfers(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n          where: $where\n        ) {\n          extrinsicHash\n          amount\n          timestamp\n          status\n          block {\n            height\n          }\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n        meta: reversibleTransfersConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    ':
    types.GetReversibleTransactionsDocument,
  '\n      query GetRecentReversibleTransactions(\n        $limit: Int\n        $offset: Int\n        $orderBy: [ReversibleTransferOrderByInput!]\n      ) {\n        reversibleTransactions: reversibleTransfers(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n        ) {\n          extrinsicHash\n          amount\n          timestamp\n          status\n          block {\n            height\n          }\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n      }\n    ':
    types.GetRecentReversibleTransactionsDocument,
  '\n      query GetReversibleTransactionsStats(\n        $startDate: DateTime!\n        $endDate: DateTime!\n      ) {\n        last24Hour: reversibleTransfersConnection(\n          orderBy: id_ASC\n          where: { timestamp_gte: $startDate, timestamp_lte: $endDate }\n        ) {\n          totalCount\n        }\n        allTime: reversibleTransfersConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    ':
    types.GetReversibleTransactionsStatsDocument,
  '\n      query GetReversibleTransactionByHash($hash: String!) {\n        reversibleTransactions: reversibleTransfers(\n          where: { extrinsicHash_eq: $hash }\n        ) {\n          fee\n          amount\n          extrinsicHash\n          txId\n          scheduledAt\n          timestamp\n          status\n          block {\n            height\n          }\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n      }\n    ':
    types.GetReversibleTransactionByHashDocument,
  '\n      query GetReversibleTransactionStatusByHash($hash: String!) {\n        reversibleTransactions: reversibleTransfers(\n          where: { extrinsicHash_eq: $hash }\n        ) {\n          status\n        }\n      }\n    ':
    types.GetReversibleTransactionStatusByHashDocument,
  '\n      query SearchAll($keyword: String, $keyword_number: Int, $limit: Int) {\n        transactions: transfers(\n          limit: $limit\n          where: { extrinsicHash_startsWith: $keyword }\n        ) {\n          extrinsicHash\n        }\n        reversibleTransactions: reversibleTransfers(\n          limit: $limit\n          where: { extrinsicHash_startsWith: $keyword }\n        ) {\n          extrinsicHash\n        }\n        accounts(limit: $limit, where: { id_startsWith: $keyword }) {\n          id\n        }\n        blocks(\n          limit: $limit\n          where: {\n            hash_startsWith: $keyword\n            OR: { height_eq: $keyword_number }\n          }\n        ) {\n          height\n        }\n      }\n    ':
    types.SearchAllDocument,
  '\n      query GetTransactions(\n        $limit: Int\n        $offset: Int\n        $orderBy: [TransferOrderByInput!]\n        $where: TransferWhereInput\n      ) {\n        transactions: transfers(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n          where: $where\n        ) {\n          fee\n          extrinsicHash\n          block {\n            height\n          }\n          amount\n          timestamp\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n        meta: transfersConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    ':
    types.GetTransactionsDocument,
  '\n      query GetRecentTransactions(\n        $limit: Int\n        $offset: Int\n        $orderBy: [TransferOrderByInput!]\n        $where: TransferWhereInput\n      ) {\n        transactions: transfers(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n          where: $where\n        ) {\n          fee\n          extrinsicHash\n          block {\n            height\n          }\n          amount\n          timestamp\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n      }\n    ':
    types.GetRecentTransactionsDocument,
  '\n      query GetTransactionsStats($startDate: DateTime!, $endDate: DateTime!) {\n        last24Hour: transfersConnection(\n          orderBy: id_ASC\n          where: {\n            timestamp_gte: $startDate\n            timestamp_lte: $endDate\n            extrinsicHash_isNull: false\n          }\n        ) {\n          totalCount\n        }\n        allTime: transfersConnection(\n          orderBy: id_ASC\n          where: { extrinsicHash_isNull: false }\n        ) {\n          totalCount\n        }\n      }\n    ':
    types.GetTransactionsStatsDocument,
  '\n      query GetTransactionByHash($hash: String!) {\n        transactions: transfers(where: { extrinsicHash_eq: $hash }) {\n          fee\n          extrinsicHash\n          block {\n            height\n          }\n          amount\n          timestamp\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n      }\n    ':
    types.GetTransactionByHashDocument
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n      query GetAccounts(\n        $limit: Int\n        $offset: Int\n        $orderBy: [AccountOrderByInput!]\n      ) {\n        accounts(limit: $limit, offset: $offset, orderBy: $orderBy) {\n          id\n          free\n          frozen\n          reserved\n        }\n        meta: accountsConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    '
): (typeof documents)['\n      query GetAccounts(\n        $limit: Int\n        $offset: Int\n        $orderBy: [AccountOrderByInput!]\n      ) {\n        accounts(limit: $limit, offset: $offset, orderBy: $orderBy) {\n          id\n          free\n          frozen\n          reserved\n        }\n        meta: accountsConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    '];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n      query GetAccountById($id: String!, $limit: Int!) {\n        account: accountById(id: $id) {\n          id\n          free\n          frozen\n          reserved\n        }\n        transactions: transfersConnection(\n          orderBy: timestamp_DESC\n          first: $limit\n          where: {\n            extrinsicHash_isNull: false\n            AND: { from: { id_eq: $id }, OR: { to: { id_eq: $id } } }\n          }\n        ) {\n          edges {\n            node {\n              fee\n              extrinsicHash\n              block {\n                height\n              }\n              amount\n              timestamp\n              from {\n                id\n              }\n              to {\n                id\n              }\n            }\n          }\n\n          totalCount\n        }\n        reversibleTransactions: reversibleTransfersConnection(\n          orderBy: timestamp_DESC\n          first: $limit\n          where: { from: { id_eq: $id }, OR: { to: { id_eq: $id } } }\n        ) {\n          edges {\n            node {\n              extrinsicHash\n              scheduledAt\n              timestamp\n              status\n              block {\n                height\n              }\n              from {\n                id\n              }\n              to {\n                id\n              }\n            }\n          }\n\n          totalCount\n        }\n      }\n    '
): (typeof documents)['\n      query GetAccountById($id: String!, $limit: Int!) {\n        account: accountById(id: $id) {\n          id\n          free\n          frozen\n          reserved\n        }\n        transactions: transfersConnection(\n          orderBy: timestamp_DESC\n          first: $limit\n          where: {\n            extrinsicHash_isNull: false\n            AND: { from: { id_eq: $id }, OR: { to: { id_eq: $id } } }\n          }\n        ) {\n          edges {\n            node {\n              fee\n              extrinsicHash\n              block {\n                height\n              }\n              amount\n              timestamp\n              from {\n                id\n              }\n              to {\n                id\n              }\n            }\n          }\n\n          totalCount\n        }\n        reversibleTransactions: reversibleTransfersConnection(\n          orderBy: timestamp_DESC\n          first: $limit\n          where: { from: { id_eq: $id }, OR: { to: { id_eq: $id } } }\n        ) {\n          edges {\n            node {\n              extrinsicHash\n              scheduledAt\n              timestamp\n              status\n              block {\n                height\n              }\n              from {\n                id\n              }\n              to {\n                id\n              }\n            }\n          }\n\n          totalCount\n        }\n      }\n    '];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n      query GetAccountsStats($startDate: DateTime!, $endDate: DateTime!) {\n        all: accountsConnection(orderBy: id_ASC) {\n          totalCount\n        }\n        recentlyActive: accountsConnection(\n          orderBy: id_ASC\n          where: {\n            transfersFrom_some: {\n              timestamp_gte: $startDate\n              timestamp_lte: $endDate\n            }\n          }\n        ) {\n          totalCount\n        }\n        recentlyDeposited: accountsConnection(\n          orderBy: id_ASC\n          where: {\n            transfersTo_some: {\n              timestamp_gte: $startDate\n              timestamp_lte: $endDate\n            }\n          }\n        ) {\n          totalCount\n        }\n      }\n    '
): (typeof documents)['\n      query GetAccountsStats($startDate: DateTime!, $endDate: DateTime!) {\n        all: accountsConnection(orderBy: id_ASC) {\n          totalCount\n        }\n        recentlyActive: accountsConnection(\n          orderBy: id_ASC\n          where: {\n            transfersFrom_some: {\n              timestamp_gte: $startDate\n              timestamp_lte: $endDate\n            }\n          }\n        ) {\n          totalCount\n        }\n        recentlyDeposited: accountsConnection(\n          orderBy: id_ASC\n          where: {\n            transfersTo_some: {\n              timestamp_gte: $startDate\n              timestamp_lte: $endDate\n            }\n          }\n        ) {\n          totalCount\n        }\n      }\n    '];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n      query GetBlocks(\n        $limit: Int\n        $offset: Int\n        $orderBy: [BlockOrderByInput!]!\n        $where: BlockWhereInput\n      ) {\n        blocks(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n          where: $where\n        ) {\n          id\n          hash\n          height\n          timestamp\n        }\n        meta: blocksConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    '
): (typeof documents)['\n      query GetBlocks(\n        $limit: Int\n        $offset: Int\n        $orderBy: [BlockOrderByInput!]!\n        $where: BlockWhereInput\n      ) {\n        blocks(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n          where: $where\n        ) {\n          id\n          hash\n          height\n          timestamp\n        }\n        meta: blocksConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    '];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n      query GetRecentBlocks(\n        $limit: Int\n        $offset: Int\n        $orderBy: [BlockOrderByInput!]\n      ) {\n        blocks(limit: $limit, offset: $offset, orderBy: $orderBy) {\n          id\n          hash\n          height\n          timestamp\n        }\n      }\n    '
): (typeof documents)['\n      query GetRecentBlocks(\n        $limit: Int\n        $offset: Int\n        $orderBy: [BlockOrderByInput!]\n      ) {\n        blocks(limit: $limit, offset: $offset, orderBy: $orderBy) {\n          id\n          hash\n          height\n          timestamp\n        }\n      }\n    '];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n      query GetBlockById($height: Int!, $hash: String!, $limit: Int!) {\n        blocks(where: { height_eq: $height, OR: { hash_eq: $hash } }) {\n          id\n          hash\n          height\n          timestamp\n        }\n        transactions: transfersConnection(\n          orderBy: timestamp_DESC\n          first: $limit\n          where: {\n            extrinsicHash_isNull: false\n            AND: {\n              block: { height_eq: $height }\n              OR: { block: { hash_eq: $hash } }\n            }\n          }\n        ) {\n          edges {\n            node {\n              fee\n              extrinsicHash\n              block {\n                height\n              }\n              amount\n              timestamp\n              from {\n                id\n              }\n              to {\n                id\n              }\n            }\n          }\n\n          totalCount\n        }\n        reversibleTransactions: reversibleTransfersConnection(\n          orderBy: timestamp_DESC\n          first: $limit\n          where: {\n            block: { height_eq: $height }\n            OR: { block: { hash_eq: $hash } }\n          }\n        ) {\n          edges {\n            node {\n              extrinsicHash\n              scheduledAt\n              timestamp\n              status\n              block {\n                height\n              }\n              from {\n                id\n              }\n              to {\n                id\n              }\n            }\n          }\n\n          totalCount\n        }\n      }\n    '
): (typeof documents)['\n      query GetBlockById($height: Int!, $hash: String!, $limit: Int!) {\n        blocks(where: { height_eq: $height, OR: { hash_eq: $hash } }) {\n          id\n          hash\n          height\n          timestamp\n        }\n        transactions: transfersConnection(\n          orderBy: timestamp_DESC\n          first: $limit\n          where: {\n            extrinsicHash_isNull: false\n            AND: {\n              block: { height_eq: $height }\n              OR: { block: { hash_eq: $hash } }\n            }\n          }\n        ) {\n          edges {\n            node {\n              fee\n              extrinsicHash\n              block {\n                height\n              }\n              amount\n              timestamp\n              from {\n                id\n              }\n              to {\n                id\n              }\n            }\n          }\n\n          totalCount\n        }\n        reversibleTransactions: reversibleTransfersConnection(\n          orderBy: timestamp_DESC\n          first: $limit\n          where: {\n            block: { height_eq: $height }\n            OR: { block: { hash_eq: $hash } }\n          }\n        ) {\n          edges {\n            node {\n              extrinsicHash\n              scheduledAt\n              timestamp\n              status\n              block {\n                height\n              }\n              from {\n                id\n              }\n              to {\n                id\n              }\n            }\n          }\n\n          totalCount\n        }\n      }\n    '];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n      query GetStatus($beginningDate: DateTime!, $endDate: DateTime!) {\n        transactions: transfersConnection(\n          orderBy: id_ASC\n          where: { extrinsicHash_isNull: false }\n        ) {\n          totalCount\n        }\n        reversibleTransactions: reversibleTransfersConnection(orderBy: id_ASC) {\n          totalCount\n        }\n        status: squidStatus {\n          hash\n          height\n          finalizedHeight\n          finalizedHash\n        }\n        allActiveAccounts: accountsConnection(\n          orderBy: id_ASC\n          where: {\n            transfersFrom_some: {\n              timestamp_gte: $beginningDate\n              timestamp_lte: $endDate\n            }\n          }\n        ) {\n          totalCount\n        }\n        allDepositAccounts: accountsConnection(\n          orderBy: id_ASC\n          where: {\n            transfersTo_some: {\n              timestamp_gte: $beginningDate\n              timestamp_lte: $endDate\n            }\n          }\n        ) {\n          totalCount\n        }\n      }\n    '
): (typeof documents)['\n      query GetStatus($beginningDate: DateTime!, $endDate: DateTime!) {\n        transactions: transfersConnection(\n          orderBy: id_ASC\n          where: { extrinsicHash_isNull: false }\n        ) {\n          totalCount\n        }\n        reversibleTransactions: reversibleTransfersConnection(orderBy: id_ASC) {\n          totalCount\n        }\n        status: squidStatus {\n          hash\n          height\n          finalizedHeight\n          finalizedHash\n        }\n        allActiveAccounts: accountsConnection(\n          orderBy: id_ASC\n          where: {\n            transfersFrom_some: {\n              timestamp_gte: $beginningDate\n              timestamp_lte: $endDate\n            }\n          }\n        ) {\n          totalCount\n        }\n        allDepositAccounts: accountsConnection(\n          orderBy: id_ASC\n          where: {\n            transfersTo_some: {\n              timestamp_gte: $beginningDate\n              timestamp_lte: $endDate\n            }\n          }\n        ) {\n          totalCount\n        }\n      }\n    '];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n      query GetReversibleTransactions(\n        $limit: Int\n        $offset: Int\n        $orderBy: [ReversibleTransferOrderByInput!]\n        $where: ReversibleTransferWhereInput\n      ) {\n        reversibleTransactions: reversibleTransfers(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n          where: $where\n        ) {\n          extrinsicHash\n          amount\n          timestamp\n          status\n          block {\n            height\n          }\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n        meta: reversibleTransfersConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    '
): (typeof documents)['\n      query GetReversibleTransactions(\n        $limit: Int\n        $offset: Int\n        $orderBy: [ReversibleTransferOrderByInput!]\n        $where: ReversibleTransferWhereInput\n      ) {\n        reversibleTransactions: reversibleTransfers(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n          where: $where\n        ) {\n          extrinsicHash\n          amount\n          timestamp\n          status\n          block {\n            height\n          }\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n        meta: reversibleTransfersConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    '];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n      query GetRecentReversibleTransactions(\n        $limit: Int\n        $offset: Int\n        $orderBy: [ReversibleTransferOrderByInput!]\n      ) {\n        reversibleTransactions: reversibleTransfers(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n        ) {\n          extrinsicHash\n          amount\n          timestamp\n          status\n          block {\n            height\n          }\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n      }\n    '
): (typeof documents)['\n      query GetRecentReversibleTransactions(\n        $limit: Int\n        $offset: Int\n        $orderBy: [ReversibleTransferOrderByInput!]\n      ) {\n        reversibleTransactions: reversibleTransfers(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n        ) {\n          extrinsicHash\n          amount\n          timestamp\n          status\n          block {\n            height\n          }\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n      }\n    '];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n      query GetReversibleTransactionsStats(\n        $startDate: DateTime!\n        $endDate: DateTime!\n      ) {\n        last24Hour: reversibleTransfersConnection(\n          orderBy: id_ASC\n          where: { timestamp_gte: $startDate, timestamp_lte: $endDate }\n        ) {\n          totalCount\n        }\n        allTime: reversibleTransfersConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    '
): (typeof documents)['\n      query GetReversibleTransactionsStats(\n        $startDate: DateTime!\n        $endDate: DateTime!\n      ) {\n        last24Hour: reversibleTransfersConnection(\n          orderBy: id_ASC\n          where: { timestamp_gte: $startDate, timestamp_lte: $endDate }\n        ) {\n          totalCount\n        }\n        allTime: reversibleTransfersConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    '];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n      query GetReversibleTransactionByHash($hash: String!) {\n        reversibleTransactions: reversibleTransfers(\n          where: { extrinsicHash_eq: $hash }\n        ) {\n          fee\n          amount\n          extrinsicHash\n          txId\n          scheduledAt\n          timestamp\n          status\n          block {\n            height\n          }\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n      }\n    '
): (typeof documents)['\n      query GetReversibleTransactionByHash($hash: String!) {\n        reversibleTransactions: reversibleTransfers(\n          where: { extrinsicHash_eq: $hash }\n        ) {\n          fee\n          amount\n          extrinsicHash\n          txId\n          scheduledAt\n          timestamp\n          status\n          block {\n            height\n          }\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n      }\n    '];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n      query GetReversibleTransactionStatusByHash($hash: String!) {\n        reversibleTransactions: reversibleTransfers(\n          where: { extrinsicHash_eq: $hash }\n        ) {\n          status\n        }\n      }\n    '
): (typeof documents)['\n      query GetReversibleTransactionStatusByHash($hash: String!) {\n        reversibleTransactions: reversibleTransfers(\n          where: { extrinsicHash_eq: $hash }\n        ) {\n          status\n        }\n      }\n    '];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n      query SearchAll($keyword: String, $keyword_number: Int, $limit: Int) {\n        transactions: transfers(\n          limit: $limit\n          where: { extrinsicHash_startsWith: $keyword }\n        ) {\n          extrinsicHash\n        }\n        reversibleTransactions: reversibleTransfers(\n          limit: $limit\n          where: { extrinsicHash_startsWith: $keyword }\n        ) {\n          extrinsicHash\n        }\n        accounts(limit: $limit, where: { id_startsWith: $keyword }) {\n          id\n        }\n        blocks(\n          limit: $limit\n          where: {\n            hash_startsWith: $keyword\n            OR: { height_eq: $keyword_number }\n          }\n        ) {\n          height\n        }\n      }\n    '
): (typeof documents)['\n      query SearchAll($keyword: String, $keyword_number: Int, $limit: Int) {\n        transactions: transfers(\n          limit: $limit\n          where: { extrinsicHash_startsWith: $keyword }\n        ) {\n          extrinsicHash\n        }\n        reversibleTransactions: reversibleTransfers(\n          limit: $limit\n          where: { extrinsicHash_startsWith: $keyword }\n        ) {\n          extrinsicHash\n        }\n        accounts(limit: $limit, where: { id_startsWith: $keyword }) {\n          id\n        }\n        blocks(\n          limit: $limit\n          where: {\n            hash_startsWith: $keyword\n            OR: { height_eq: $keyword_number }\n          }\n        ) {\n          height\n        }\n      }\n    '];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n      query GetTransactions(\n        $limit: Int\n        $offset: Int\n        $orderBy: [TransferOrderByInput!]\n        $where: TransferWhereInput\n      ) {\n        transactions: transfers(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n          where: $where\n        ) {\n          fee\n          extrinsicHash\n          block {\n            height\n          }\n          amount\n          timestamp\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n        meta: transfersConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    '
): (typeof documents)['\n      query GetTransactions(\n        $limit: Int\n        $offset: Int\n        $orderBy: [TransferOrderByInput!]\n        $where: TransferWhereInput\n      ) {\n        transactions: transfers(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n          where: $where\n        ) {\n          fee\n          extrinsicHash\n          block {\n            height\n          }\n          amount\n          timestamp\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n        meta: transfersConnection(orderBy: id_ASC) {\n          totalCount\n        }\n      }\n    '];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n      query GetRecentTransactions(\n        $limit: Int\n        $offset: Int\n        $orderBy: [TransferOrderByInput!]\n        $where: TransferWhereInput\n      ) {\n        transactions: transfers(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n          where: $where\n        ) {\n          fee\n          extrinsicHash\n          block {\n            height\n          }\n          amount\n          timestamp\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n      }\n    '
): (typeof documents)['\n      query GetRecentTransactions(\n        $limit: Int\n        $offset: Int\n        $orderBy: [TransferOrderByInput!]\n        $where: TransferWhereInput\n      ) {\n        transactions: transfers(\n          limit: $limit\n          offset: $offset\n          orderBy: $orderBy\n          where: $where\n        ) {\n          fee\n          extrinsicHash\n          block {\n            height\n          }\n          amount\n          timestamp\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n      }\n    '];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n      query GetTransactionsStats($startDate: DateTime!, $endDate: DateTime!) {\n        last24Hour: transfersConnection(\n          orderBy: id_ASC\n          where: {\n            timestamp_gte: $startDate\n            timestamp_lte: $endDate\n            extrinsicHash_isNull: false\n          }\n        ) {\n          totalCount\n        }\n        allTime: transfersConnection(\n          orderBy: id_ASC\n          where: { extrinsicHash_isNull: false }\n        ) {\n          totalCount\n        }\n      }\n    '
): (typeof documents)['\n      query GetTransactionsStats($startDate: DateTime!, $endDate: DateTime!) {\n        last24Hour: transfersConnection(\n          orderBy: id_ASC\n          where: {\n            timestamp_gte: $startDate\n            timestamp_lte: $endDate\n            extrinsicHash_isNull: false\n          }\n        ) {\n          totalCount\n        }\n        allTime: transfersConnection(\n          orderBy: id_ASC\n          where: { extrinsicHash_isNull: false }\n        ) {\n          totalCount\n        }\n      }\n    '];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: '\n      query GetTransactionByHash($hash: String!) {\n        transactions: transfers(where: { extrinsicHash_eq: $hash }) {\n          fee\n          extrinsicHash\n          block {\n            height\n          }\n          amount\n          timestamp\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n      }\n    '
): (typeof documents)['\n      query GetTransactionByHash($hash: String!) {\n        transactions: transfers(where: { extrinsicHash_eq: $hash }) {\n          fee\n          extrinsicHash\n          block {\n            height\n          }\n          amount\n          timestamp\n          from {\n            id\n          }\n          to {\n            id\n          }\n        }\n      }\n    '];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
